<?php

namespace App\Repositories;

use Exception;
use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Collection;
use App\Models\GenericModel;
use App\Repositories\Interfaces\GenericInterface;

class GenericRepository implements GenericInterface
{
    private $model;

    function __construct() {
        $this->model = new GenericModel();
    }

    public function getAll()
	{
        try
        {
            $result =  $this->model->all();
        }
        catch(Exception $e)
        {
            throw new Exception(trans('exceptions.querySelect', ['message' => $e->getMessage()]));
		}
		
		return $result;
	}

    public function getAllByActive()
	{
        try
        {
            $result =  $this->model->where('status','A')->get();
        }
        catch(Exception $e)
        {
            throw new Exception(trans('exceptions.querySelect', ['message' => $e->getMessage()]));
		}
		
		return $result;
	}

    public function getById(int $id)
	{
		try
		{
			$result = $this->model->find($id);
		}
		catch(Exception $e)
		{
			throw new Exception(trans('exceptions.querySelect', ['message' => $e->getMessage()]));
		}

		return $result;
	}

    public function insert(array $dados)
	{
		try
		{
			$dados['created_at'] = date("Y-m-d H:i:s");
			$this->model->create($dados);
		}
		catch(Exception $e)
		{
			throw new Exception(trans('exceptions.queryInsert', ['message' => $e->getMessage()]));
		}

		return $this->model->get();
	}

    public function update(array $dados, int $id)
	{
		try
		{
			$dados['updated_at'] = date("Y-m-d H:i:s");
			$result = $this->model->find($id);
			$result->update($dados);
		}
		catch(Exception $e)
		{
			throw new Exception(trans('exceptions.queryUpdate', ['message' => $e->getMessage()]));
		}

		return $result->get();
	}

    public function delete(int $id)
	{
		try
		{
			$this->model->destroy($id);
		}
		catch(QueryException $e)
		{
			if("23000" == $e->getCode())
				throw new Exception(trans('exceptions.queryDeleteForeachKey'));
				
			throw new Exception($e->getMessage());
		}
		catch(Exception $e)
		{
			throw new Exception(trans('exceptions.queryDelete', ['message' => $e->getMessage()]));
		}

		return true;
	}
}